trigger:
  - main

pool:
  vmImage: windows-latest

variables:
  connectedServiceNameARM: '$(AZURE_SUBSCRIPTION)'
  repository: '_$(Build.Repository.Name)'
  storage: '$(CONTAINER_NAME)'
  sourceUrl: '$(SOURCE_URL)'

stages:
  - stage: BuildAndTest
    pool:
      vmImage: ubuntu-latest
    jobs:
      - job: BuildAndTest
        steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '14.x'
          displayName: 'Install Node.js'

        - script: |
            npm install
            npm run build
          displayName: 'npm install and build'

        - task: CopyFiles@2
          displayName: 'copy files to: $(Build.ArtifactStagingDirectory)'
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)/build'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifact: drop'
          inputs:
            PathtoPublish: '$(build.ArtifactStagingDirectory)'

  - stage: Preprocessing
    pool:
      vmImage: windows-latest
    jobs:
      - job: PerformPreprocessing
        steps:
        - checkout: none

        - task: DownloadBuildArtifacts@0
          displayName: 'Download artifacts for preprocessing'
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'drop'
            downloadPath: '$(System.ArtifactsDirectory)'

        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: |
              $url = "$($env:SOURCE_URL)"
              $buildFile = '$(System.ArtifactsDirectory)/drop/index.html'
              Write-Host "Calling: $url"
              $htmlContent = Invoke-WebRequest $url | Select-Object -ExpandProperty Content
              Write-Host "Content received = $($htmlContent)"

              $content = Get-Content -Path $buildFile -Raw 
              
              $html = New-Object -ComObject "HTMLFile"
              try {
                $html.IHTMLDocument2_write($content)
              }
              catch {
                $src = [System.Text.Encoding]::Unicode.GetBytes($content)
                $html.write($src)
              }

              Write-Host "Fetching scripts and links for styling"

              $scripts = $html.all.tags('script') | ForEach-Object src
              $cssLinks = $html.all.tags('link') |
              Where-Object { $_.rel -eq 'stylesheet' } |
              Select-Object -Expand href

              $scriptTags = ''
              foreach ($source in $scripts) {
                $scriptTags += "<script src='$source' defer></script>"
              }

              foreach ($link in $cssLinks) {
                $scriptTags += "<link rel='stylesheet' href='$link'>"
              }
              $scriptTags += '</head>'

              $htmlContent -replace '</head>', $scriptTags | 
                Set-Content $buildFile
  
        - task: CopyFiles@2
          displayName: 'copy files again to republish: $(Build.ArtifactStagingDirectory)'
          inputs:
            SourceFolder: '$(System.ArtifactsDirectory)/drop'
            TargetFolder: '$(Build.ArtifactStagingDirectory)/final'

        - task: PublishBuildArtifacts@1
          displayName: 'Republish Artifact: final'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)/final'

  - stage: Deployment
    pool:
      vmImage: windows-latest
    jobs:
      - job: Deploy
        steps:
        - checkout: none

        - task: DownloadBuildArtifacts@0
          displayName: 'Download artifacts'
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'drop'
            downloadPath: '$(System.DefaultWorkingDirectory)/$(repository)'


        - task: AzureFileCopy@2
          displayName: 'Copy files to blob storage'
          inputs:
            SourcePath: '$(System.DefaultWorkingDirectory)/$(repository)/drop'
            azureSubscription: '$(connectedServiceNameARM)'
            Destination: AzureBlob
            storage: $(storage)
            ContainerName: '$web'
            BlobPrefix: '$(Build.SourceVersion)'
